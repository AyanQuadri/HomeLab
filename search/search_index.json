{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cybersecurity Homelab Projects","text":"<p>Welcome to my cybersecurity homelab documentation. This site showcases two major infrastructure projects I've built to demonstrate my skills in network security, virtualization, and self-hosted solutions.</p>"},{"location":"#project-overview","title":"Project Overview","text":""},{"location":"#homelab-networking-setup","title":"Homelab &amp; Networking Setup","text":"<p>I built a comprehensive homelab environment using Proxmox VE for virtualization, implementing secure file sharing with Samba, and configuring proper network security practices. The setup includes multiple Arch Linux VMs with custom configurations and secure remote access.</p> <p>Key Technologies: Proxmox VE, Arch Linux, Samba, SSH, LVM, NTFS-3G</p>"},{"location":"#self-hosted-supabase-with-secure-access","title":"Self-Hosted Supabase with Secure Access","text":"<p>I deployed a containerized Supabase instance on Arch Linux with Docker, implementing secure remote access through Twingate's zero-trust network access. The setup provides a fully functional PostgreSQL-based backend accessible securely from anywhere.</p> <p>Key Technologies: Docker, Supabase, PostgreSQL, Twingate, Arch Linux</p>"},{"location":"#environment-setup","title":"Environment Setup","text":"<p>All projects were built and tested in the following environment:</p> <ul> <li>Host OS: Proxmox VE 8.x</li> <li>Guest OS: Arch Linux (latest)</li> <li>Virtualization: KVM/QEMU</li> <li>Storage: LVM with ext4 filesystem</li> <li>Networking: Bridged networking with DHCP</li> </ul>"},{"location":"#documentation-features","title":"Documentation Features","text":"<p>This documentation includes:</p> <ul> <li>Step-by-step guides with explanations for each command</li> <li>Copy-paste reproduction blocks for easy replication</li> <li>Troubleshooting sections for common issues</li> <li>Verification commands to test each setup</li> <li>Security considerations and best practices</li> </ul>"},{"location":"homelab/","title":"Homelab &amp; Networking Setup","text":""},{"location":"homelab/#one-minute-summary","title":"One-Minute Summary","text":"<p>I built a comprehensive cybersecurity homelab environment featuring: \u2022 Proxmox VE virtualization platform with optimized storage management and enterprise repository configuration \u2022 Multiple Arch Linux VMs with custom shell environments, development tools, and security hardening \u2022 Secure file sharing system using Samba with NTFS drive integration and proper access controls \u2022 Network security implementation with SSH hardening and user privilege management</p>"},{"location":"homelab/#project-timeline","title":"Project Timeline","text":"Proxmox Setup <p>Installed Proxmox VE, configured storage, disabled enterprise repos</p> Arch Linux Deployment <p>Deployed and configured multiple Arch Linux VMs with custom environments</p> File Sharing &amp; Security <p>Implemented Samba file sharing with NTFS integration and SSH security</p> Testing &amp; Documentation <p>Comprehensive testing, performance optimization, and documentation</p>"},{"location":"homelab/#copy-paste-reproduction","title":"Copy-Paste Reproduction","text":"<p>Here's the minimal command sequence to reproduce this setup:</p> <pre><code># 1. Configure Proxmox repositories (on Proxmox host)\nsudo nano /etc/apt/sources.list.d/pve-enterprise.list  # Comment out enterprise repo\necho \"deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription\" | sudo tee /etc/apt/sources.list.d/pve-no-subscription.list\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# 2. Setup file sharing (on Proxmox host)\napt update &amp;&amp; apt install -y ntfs-3g samba openssh-server\nmkdir -p /mnt/ntfs1 /mnt/ntfs2\nmount -t ntfs-3g /dev/&lt;your-disk1&gt; /mnt/ntfs1\nmount -t ntfs-3g /dev/&lt;your-disk2&gt; /mnt/ntfs2\n\n# 3. Configure Samba and SSH security\nadduser &lt;your-username&gt;\nsmbpasswd -a &lt;your-username&gt;\nsed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config\nsystemctl restart ssh smbd nmbd\n</code></pre>"},{"location":"homelab/arch-linux/","title":"Arch Linux VM Setup","text":""},{"location":"homelab/arch-linux/#initial-installation","title":"Initial Installation","text":""},{"location":"homelab/arch-linux/#start-arch-installation","title":"Start Arch Installation","text":"<p>Start Arch Installation:</p> <pre><code>pacman -Sy archinstall\n</code></pre> <p>What this does: Updates package database and installs the guided Arch installer Why this matters: Provides a user-friendly installation method</p> <pre><code>archinstall\n</code></pre> <p>What this does: Launches the guided Arch Linux installation wizard Why this matters: Simplifies the traditionally complex Arch installation process</p>"},{"location":"homelab/arch-linux/#manual-partition-setup-alternative","title":"Manual Partition Setup (Alternative)","text":"<p>Check Available Disks:</p> <pre><code>lsblk\n</code></pre> <p>What this does: Lists all block devices and their partitions Why this matters: Helps identify the target disk for installation</p> <pre><code>ip addr\n</code></pre> <p>What this does: Displays network interface configuration Why this matters: Confirms network connectivity for package downloads</p> <p>Partition the Disk:</p> <pre><code>cfdisk /dev/sda\n</code></pre> <p>What this does: Opens a text-based partition editor Why this matters: Allows manual control over partition layout Gotcha: Replace <code>/dev/sda</code> with your actual target device</p> <p>Format Partitions:</p> <pre><code>mkfs.fat -F32 /dev/sda1\n</code></pre> <p>What this does: Creates a FAT32 filesystem on the EFI partition Why this matters: UEFI systems require FAT32 for the boot partition</p> <pre><code>mkfs.ext4 /dev/sda2\n</code></pre> <p>What this does: Creates an ext4 filesystem on the root partition Why this matters: ext4 is the standard Linux filesystem with good performance</p>"},{"location":"homelab/arch-linux/#mount-and-install-base-system","title":"Mount and Install Base System","text":"<pre><code>mount /dev/sda2 /mnt\nmkdir -p /mnt/boot/efi\nmount /dev/sda1 /mnt/boot/efi\n</code></pre> <p>What this does: Mounts the root and EFI partitions Why this matters: Prepares the target filesystem for installation</p> <pre><code>reflector --country India --latest 5 --sort rate --save /etc/pacman.d/mirrorlist\n</code></pre> <p>What this does: Generates an optimized mirror list for faster downloads Why this matters: Improves package installation speed Gotcha: Replace \"India\" with your country for better speeds</p> <pre><code>pacstrap -K /mnt base linux linux-firmware\n</code></pre> <p>What this does: Installs the base Arch Linux system Why this matters: Provides the minimal system needed to boot</p> <pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre> <p>What this does: Generates filesystem table with UUIDs Why this matters: Ensures proper mounting after boot</p>"},{"location":"homelab/arch-linux/#system-configuration","title":"System Configuration","text":"<pre><code>arch-chroot /mnt\n</code></pre> <p>What this does: Changes root into the newly installed system Why this matters: Allows configuration of the installed system</p> <pre><code>ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime\nhwclock --systohc\n</code></pre> <p>What this does: Sets the system timezone and syncs hardware clock Why this matters: Ensures correct time configuration</p> <pre><code>pacman -S nano vim\n</code></pre> <p>What this does: Installs text editors Why this matters: Needed for editing configuration files</p> <p>Locale Configuration:</p> <pre><code>nano /etc/locale.gen\n</code></pre> <p>Uncomment: <code>en_US.UTF-8 UTF-8</code></p> <pre><code>locale-gen\necho \"LANG=en_US.UTF-8\" &gt; /etc/locale.conf\n</code></pre> <p>What this does: Configures system language settings Why this matters: Sets the default system language</p> <p>Network Configuration:</p> <pre><code>echo \"your-hostname\" &gt; /etc/hostname\n</code></pre> <p>What this does: Sets the system hostname Why this matters: Identifies the system on the network</p> <p>Edit <code>/etc/hosts</code>:</p> <pre><code>nano /etc/hosts\n</code></pre> <p>Add:</p> <pre><code>127.0.0.1   localhost\n::1         localhost\n127.0.1.1   your-hostname.localdomain your-hostname\n</code></pre>"},{"location":"homelab/arch-linux/#user-and-security-setup","title":"User and Security Setup","text":"<pre><code>passwd\n</code></pre> <p>What this does: Sets the root password Why this matters: Secures the system administrator account</p> <pre><code>pacman -S openssh networkmanager sudo grub efibootmgr base-devel git curl qemu-guest-agent\n</code></pre> <p>What this does: Installs essential system packages Why this matters: Provides networking, SSH, bootloader, and virtualization support</p> <pre><code>systemctl enable NetworkManager\nsystemctl enable sshd\nsystemctl enable qemu-guest-agent\n</code></pre> <p>What this does: Enables essential services to start at boot Why this matters: Ensures network and SSH access after reboot</p>"},{"location":"homelab/arch-linux/#bootloader-installation","title":"Bootloader Installation","text":"<pre><code>grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB\ngrub-mkconfig -o /boot/grub/grub.cfg\n</code></pre> <p>What this does: Installs and configures the GRUB bootloader Why this matters: Makes the system bootable</p> <pre><code>exit\numount -R /mnt\nreboot\n</code></pre>"},{"location":"homelab/arch-linux/#system-enhancements","title":"System Enhancements","text":""},{"location":"homelab/arch-linux/#swap-file-configuration","title":"Swap File Configuration","text":"<pre><code>sudo fallocate -l 4G /swapfile\n</code></pre> <p>What this does: Creates a 4GB swap file Why this matters: Provides virtual memory for better system performance</p> <pre><code>sudo chmod 600 /swapfile\n</code></pre> <p>What this does: Sets proper permissions on the swap file Why this matters: Security best practice for swap files</p> <pre><code>sudo mkswap /swapfile\nsudo swapon /swapfile\n</code></pre> <p>What this does: Initializes and activates the swap file Why this matters: Makes the swap space immediately available</p> <pre><code>echo '/swapfile none swap defaults 0 0' | sudo tee -a /etc/fstab\n</code></pre> <p>What this does: Makes swap permanent across reboots Why this matters: Ensures swap is available after system restart</p> <p>Verification:</p> <pre><code>free -h\nswapon --show\n</code></pre>"},{"location":"homelab/arch-linux/#development-environment-setup","title":"Development Environment Setup","text":"<p>Install Neovim with NvChad:</p> <pre><code>sudo pacman -S nvim\n</code></pre> <p>What this does: Installs Neovim text editor Why this matters: Provides a powerful, modern text editor</p> <pre><code>git clone https://github.com/NvChad/starter ~/.config/nvim\n</code></pre> <p>What this does: Installs NvChad configuration for Neovim Why this matters: Provides a pre-configured IDE-like experience</p>"},{"location":"homelab/arch-linux/#shell-environment-enhancement","title":"Shell Environment Enhancement","text":"<p>Install and Configure Zsh:</p> <pre><code>sudo pacman -S zsh\nchsh -s /bin/zsh\n</code></pre> <p>What this does: Installs Zsh and sets it as the default shell Why this matters: Zsh offers better features than bash</p> <pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> <p>What this does: Installs Oh My Zsh framework Why this matters: Provides themes and plugins for enhanced productivity</p> <p>Install Useful Plugins:</p> <pre><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n</code></pre> <pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n</code></pre> <p>What these do: Add autosuggestions and syntax highlighting to Zsh Why this matters: Improves command-line productivity and reduces errors</p> <p>Edit <code>~/.zshrc</code> to enable plugins:</p> <pre><code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n</code></pre> <p>Install Powerlevel10k Theme:</p> <pre><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k\n</code></pre> <pre><code>sudo pacman -S ttf-hack-nerd\n</code></pre> <p>What this does: Installs a powerline-compatible font Why this matters: Required for proper theme display</p> <p>Set theme in <code>~/.zshrc</code>:</p> <pre><code>ZSH_THEME=\"powerlevel10k/powerlevel10k\"\n</code></pre> <pre><code>exec zsh\np10k configure\n</code></pre> <p>Additional Tools:</p> <pre><code>sudo pacman -S fzf nnn neovim htop wget tmux fastfetch elinks yt-dlp mpv\n</code></pre> <p>What this does: Installs various productivity and system tools Why this matters: Provides a complete development environment</p>"},{"location":"homelab/file-sharing/","title":"File Sharing Configuration","text":""},{"location":"homelab/file-sharing/#install-required-packages-proxmox-host","title":"Install Required Packages (Proxmox Host)","text":"<pre><code>apt update &amp;&amp; apt install -y ntfs-3g samba openssh-server\n</code></pre> <p>What this does: Installs NTFS support, Samba file sharing, and SSH server Why this matters: Enables file sharing with Windows systems and secure remote access Note: This runs on the Proxmox host (Debian-based)</p>"},{"location":"homelab/file-sharing/#disk-management","title":"Disk Management","text":"<p>Identify Storage Devices:</p> <pre><code>lsblk -f\n</code></pre> <p>What this does: Lists all block devices with filesystem information Why this matters: Helps identify NTFS partitions to mount</p> <pre><code>fdisk -l\n</code></pre> <p>What this does: Displays detailed partition information Why this matters: Confirms partition types and sizes</p> <p>Fix NTFS Partitions (if needed):</p> <pre><code>ntfsfix /dev/&lt;disk1&gt;\nntfsfix /dev/&lt;disk2&gt;\n</code></pre> <p>What this does: Repairs any NTFS filesystem inconsistencies Why this matters: Ensures reliable mounting and data integrity Gotcha: Replace <code>&lt;disk1&gt;</code> and <code>&lt;disk2&gt;</code> with actual device names</p>"},{"location":"homelab/file-sharing/#mount-configuration","title":"Mount Configuration","text":"<p>Create Mount Points:</p> <pre><code>mkdir -p /mnt/ntfs1\nmkdir -p /mnt/ntfs2\n</code></pre> <p>What this does: Creates directories for mounting NTFS drives Why this matters: Provides access points for the NTFS filesystems</p> <p>Test Manual Mounting:</p> <pre><code>mount -t ntfs-3g /dev/&lt;disk1&gt; /mnt/ntfs1\nmount -t ntfs-3g /dev/&lt;disk2&gt; /mnt/ntfs2\n</code></pre> <p>What this does: Mounts NTFS partitions temporarily Why this matters: Tests mounting before making it permanent Gotcha: Replace with actual device names from <code>lsblk</code> output</p> <p>Make Permanent:</p> <pre><code>echo \"/dev/&lt;disk1&gt;  /mnt/ntfs1  ntfs-3g  defaults  0  0\" &gt;&gt; /etc/fstab\necho \"/dev/&lt;disk2&gt;  /mnt/ntfs2  ntfs-3g  defaults  0  0\" &gt;&gt; /etc/fstab\n</code></pre> <p>What this does: Adds mount entries to fstab for automatic mounting Why this matters: Ensures drives are mounted automatically at boot</p>"},{"location":"homelab/file-sharing/#samba-configuration","title":"Samba Configuration","text":"<p>Backup Original Configuration:</p> <pre><code>cp /etc/samba/smb.conf /etc/samba/smb.conf.bak\n</code></pre> <p>What this does: Creates a backup of the original Samba configuration Why this matters: Allows rollback if configuration issues occur</p> <p>Configure Samba Shares:</p> <pre><code>cat &lt;&lt;EOF &gt;&gt; /etc/samba/smb.conf\n\n[ntfs1]\n   path = /mnt/ntfs1\n   browseable = yes\n   read only = no\n   guest ok = no\n   valid users = &lt;your-username&gt;\n\n[ntfs2]\n   path = /mnt/ntfs2\n   browseable = yes\n   read only = no\n   guest ok = no\n   valid users = &lt;your-username&gt;\nEOF\n</code></pre> <p>What this does: Adds Samba share definitions for the NTFS drives Why this matters: Makes the drives accessible over the network Gotcha: Replace <code>&lt;your-username&gt;</code> with your actual username</p>"},{"location":"homelab/file-sharing/#user-management-and-security","title":"User Management and Security","text":"<p>Create System User:</p> <pre><code>adduser &lt;your-username&gt;\n</code></pre> <p>What this does: Creates a new system user account Why this matters: Provides secure access to file shares</p> <p>Set Samba Password:</p> <pre><code>smbpasswd -a &lt;your-username&gt;\n</code></pre> <p>What this does: Adds the user to Samba with a password Why this matters: Enables authentication for file share access</p> <p>Disable Root Samba Access:</p> <pre><code>smbpasswd -x root\n</code></pre> <p>What this does: Removes root user from Samba access Why this matters: Improves security by preventing root-level file share access</p> <p>Restart Samba Services:</p> <pre><code>systemctl restart smbd nmbd\n</code></pre> <p>What this does: Restarts Samba file sharing services Why this matters: Applies configuration changes and enables shares</p>"},{"location":"homelab/networking/","title":"Networking Configuration","text":""},{"location":"homelab/networking/#system-health-check","title":"System Health Check","text":"<pre><code># Check system resources\nfree -h\ndf -h\nlsblk\n</code></pre>"},{"location":"homelab/networking/#network-services-status","title":"Network Services Status","text":"<pre><code># Check service status\nsystemctl status smbd\nsystemctl status nmbd\nsystemctl status ssh\n</code></pre>"},{"location":"homelab/networking/#file-share-testing","title":"File Share Testing","text":"<pre><code># Test Samba shares\nsmbclient -L localhost -U &lt;your-username&gt;\n</code></pre>"},{"location":"homelab/networking/#network-connectivity","title":"Network Connectivity","text":"<pre><code># Check listening ports\nss -tulpn | grep -E ':22|:139|:445'\n\n# Test SSH access\nssh &lt;your-username&gt;@&lt;server-ip&gt;\n</code></pre>"},{"location":"homelab/networking/#storage-verification","title":"Storage Verification","text":"<pre><code># Check mounted filesystems\nmount | grep ntfs\ncat /etc/fstab | grep ntfs\n</code></pre>"},{"location":"homelab/performance/","title":"Performance Metrics","text":""},{"location":"homelab/performance/#system-performance-overview","title":"System Performance Overview","text":"Component Configuration Performance Proxmox Host 8GB RAM, 4 CPU cores ~20% average load Arch Linux VMs 2GB RAM, 2 CPU cores each ~5% idle CPU usage Storage LVM on SSD ~150MB/s read/write Network Gigabit Ethernet Full bandwidth utilization Samba Shares NTFS-3G mounted ~100MB/s file transfers"},{"location":"homelab/performance/#resource-monitoring-commands","title":"Resource Monitoring Commands","text":""},{"location":"homelab/performance/#system-resource-usage","title":"System Resource Usage","text":"<pre><code># Check memory usage\nfree -h\n\n# Check disk usage\ndf -h\n\n# Check CPU usage\nhtop\n</code></pre>"},{"location":"homelab/performance/#storage-performance","title":"Storage Performance","text":"<pre><code># Test disk read speed\nsudo hdparm -t /dev/sda\n\n# Test disk write speed\ndd if=/dev/zero of=/tmp/test bs=1M count=1024 conv=fdatasync\n\n# Check I/O statistics\niostat -x 1\n</code></pre>"},{"location":"homelab/performance/#network-performance","title":"Network Performance","text":"<pre><code># Check network interface statistics\ncat /proc/net/dev\n\n# Test network bandwidth (using iperf3)\niperf3 -s  # On server\niperf3 -c &lt;server-ip&gt;  # On client\n\n# Monitor network connections\nss -tuln\n</code></pre>"},{"location":"homelab/performance/#virtualization-overhead","title":"Virtualization Overhead","text":"<pre><code># Check VM resource allocation\nqm list\n\n# Monitor VM performance\nqm monitor &lt;vmid&gt;\n\n# Check host virtualization load\ncat /proc/loadavg\n</code></pre>"},{"location":"homelab/performance/#optimization-tips","title":"Optimization Tips","text":""},{"location":"homelab/performance/#storage-optimization","title":"Storage Optimization","text":"<ul> <li>Use SSD storage for VM disks</li> <li>Enable discard/trim support</li> <li>Configure proper I/O scheduler</li> <li>Use thin provisioning for disk space efficiency</li> </ul>"},{"location":"homelab/performance/#memory-optimization","title":"Memory Optimization","text":"<ul> <li>Configure appropriate swap sizes</li> <li>Enable memory ballooning for VMs</li> <li>Monitor memory usage patterns</li> <li>Use hugepages for better performance</li> </ul>"},{"location":"homelab/performance/#network-optimization","title":"Network Optimization","text":"<ul> <li>Use virtio network drivers</li> <li>Configure proper MTU sizes</li> <li>Enable network offloading features</li> <li>Monitor bandwidth utilization</li> </ul>"},{"location":"homelab/proxmox/","title":"Proxmox Host Configuration","text":""},{"location":"homelab/proxmox/#repository-management","title":"Repository Management","text":""},{"location":"homelab/proxmox/#disable-enterprise-repository","title":"Disable Enterprise Repository","text":"<p>Disable Enterprise Repository:</p> <pre><code>sudo nano /etc/apt/sources.list.d/pve-enterprise.list\n</code></pre> <p>What this does: Opens the enterprise repository configuration file for editing Why this matters: Enterprise repos require a subscription and will cause update errors</p> <p>Inside the file, comment out the enterprise repository line:</p> <pre><code># deb https://enterprise.proxmox.com/debian/pve bookworm pve-enterprise\n</code></pre> <p>Add No-Subscription Repository:</p> <pre><code>echo \"deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription\" | sudo tee /etc/apt/sources.list.d/pve-no-subscription.list\n</code></pre> <p>What this does: Adds the free Proxmox repository for updates Why this matters: Enables system updates without requiring a subscription Gotcha: Always check the Debian version (bookworm) matches your Proxmox version</p>"},{"location":"homelab/proxmox/#system-updates","title":"System Updates","text":"<pre><code>sudo apt update\n</code></pre> <p>What this does: Updates the package database with new repository information Why this matters: Ensures we have access to the latest packages</p> <pre><code>sudo apt upgrade -y\n</code></pre> <p>What this does: Upgrades all installed packages to their latest versions Why this matters: Applies security patches and bug fixes Gotcha: The <code>-y</code> flag automatically accepts all prompts</p>"},{"location":"homelab/proxmox/#storage-optimization","title":"Storage Optimization","text":"<pre><code>lvremove pve/data\n</code></pre> <p>What this does: Removes the default 'data' logical volume Why this matters: Frees up space for the root filesystem to expand Gotcha: This is destructive - ensure you have backups if needed</p> <pre><code>lvextend -l +100%FREE pve/root\n</code></pre> <p>What this does: Extends the root logical volume to use all available free space Why this matters: Maximizes storage available for VMs and containers</p> <pre><code>resize2fs /dev/mapper/pve-root\n</code></pre> <p>What this does: Resizes the ext4 filesystem to use the newly extended space Why this matters: Makes the additional space actually usable by the system</p> <p>Verification:</p> <pre><code>df -h\nlsblk\n</code></pre>"},{"location":"homelab/proxmox/#ssh-security-hardening","title":"SSH Security Hardening","text":"<p>Disable Root SSH Login:</p> <pre><code>sed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config\n</code></pre> <p>What this does: Disables direct root login via SSH Why this matters: Critical security hardening to prevent root compromise Gotcha: Ensure you have a regular user with sudo access before doing this</p> <p>Restart SSH Service:</p> <pre><code>systemctl restart ssh\n</code></pre> <p>What this does: Applies SSH configuration changes Why this matters: Makes the security changes active</p>"},{"location":"homelab/troubleshooting/","title":"Troubleshooting Guide","text":""},{"location":"homelab/troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Samba shares not visible from Windows <p>Symptoms: Cannot see shares in Windows Network Solution: Check firewall and enable SMB discovery <pre><code># Check if Samba is listening\nss -tulpn | grep :445\n\n# Restart Samba services\nsystemctl restart smbd nmbd\n\n# Test local access\nsmbclient -L localhost -U &lt;username&gt;\n</code></pre></p> NTFS drives not mounting automatically <p>Symptoms: Drives not available after reboot Solution: Check fstab entries and mount manually <pre><code># Check fstab entries\ncat /etc/fstab | grep ntfs\n\n# Test manual mount\nmount -a\n\n# Check for errors\ndmesg | grep ntfs\n</code></pre></p> SSH connection refused <p>Symptoms: Cannot connect via SSH Solution: Verify SSH service and firewall <pre><code># Check SSH service status\nsystemctl status ssh\n\n# Verify SSH is listening\nss -tulpn | grep :22\n\n# Check SSH configuration\nsshd -t\n</code></pre></p> Proxmox updates failing <p>Symptoms: Package update errors Solution: Verify repository configuration <pre><code># Check repository files\nls /etc/apt/sources.list.d/\n\n# Update package lists\napt update\n\n# Check for errors\napt list --upgradable\n</code></pre></p> Low storage space on Proxmox <p>Symptoms: Insufficient space for VMs Solution: Extend root logical volume <pre><code># Check current space\ndf -h /\n\n# Check LVM status\npvs\nvgs\nlvs\n\n# Extend if space available\nlvextend -l +100%FREE pve/root\nresize2fs /dev/mapper/pve-root\n</code></pre></p> Arch Linux VM won't boot <p>Symptoms: VM fails to start or boot Solution: Check GRUB and VM settings <pre><code># From Proxmox console, check VM logs\ntail /var/log/pve/qemu-server/&lt;vmid&gt;.log\n\n# Boot from rescue media and check GRUB\ngrub-mkconfig -o /boot/grub/grub.cfg\n</code></pre></p>"},{"location":"homelab/troubleshooting/#network-troubleshooting","title":"Network Troubleshooting","text":""},{"location":"homelab/troubleshooting/#connectivity-issues","title":"Connectivity Issues","text":"<pre><code># Test network connectivity\nping 8.8.8.8\n\n# Check routing table\nip route show\n\n# Verify DNS resolution\nnslookup google.com\n\n# Check network interface status\nip addr show\n</code></pre>"},{"location":"homelab/troubleshooting/#service-issues","title":"Service Issues","text":"<pre><code># Check all listening services\nss -tuln\n\n# Verify service status\nsystemctl status &lt;service-name&gt;\n\n# Check service logs\njournalctl -u &lt;service-name&gt; -f\n</code></pre>"},{"location":"homelab/troubleshooting/#firewall-issues","title":"Firewall Issues","text":"<pre><code># Check iptables rules\niptables -L -n\n\n# Check ufw status (if installed)\nufw status\n\n# Test port connectivity\ntelnet &lt;host&gt; &lt;port&gt;\n</code></pre>"},{"location":"homelab/troubleshooting/#performance-troubleshooting","title":"Performance Troubleshooting","text":""},{"location":"homelab/troubleshooting/#high-cpu-usage","title":"High CPU Usage","text":"<pre><code># Check top processes\ntop\n\n# Check system load\nuptime\n\n# Monitor CPU usage over time\nsar -u 1 10\n</code></pre>"},{"location":"homelab/troubleshooting/#memory-issues","title":"Memory Issues","text":"<pre><code># Check memory usage\nfree -h\n\n# Check swap usage\nswapon -s\n\n# Find memory-consuming processes\nps aux --sort=-%mem | head\n</code></pre>"},{"location":"homelab/troubleshooting/#storage-issues","title":"Storage Issues","text":"<pre><code># Check disk usage\ndf -h\n\n# Find large files\nfind / -type f -size +100M -exec ls -lh {} \\; 2&gt;/dev/null\n\n# Check I/O wait\niostat -x 1\n</code></pre>"},{"location":"homelab/troubleshooting/#emergency-recovery","title":"Emergency Recovery","text":""},{"location":"homelab/troubleshooting/#boot-issues","title":"Boot Issues","text":"<pre><code># Boot from rescue media\n# Mount root filesystem\nmount /dev/sda2 /mnt\n\n# Chroot into system\narch-chroot /mnt\n\n# Fix bootloader\ngrub-install /dev/sda\ngrub-mkconfig -o /boot/grub/grub.cfg\n</code></pre>"},{"location":"homelab/troubleshooting/#file-system-corruption","title":"File System Corruption","text":"<pre><code># Check filesystem\nfsck /dev/sda2\n\n# Force filesystem check\nfsck -f /dev/sda2\n\n# Repair filesystem\nfsck -y /dev/sda2\n</code></pre>"},{"location":"homelab/troubleshooting/#service-recovery","title":"Service Recovery","text":"<pre><code># Reset failed services\nsystemctl reset-failed\n\n# Reload systemd configuration\nsystemctl daemon-reload\n\n# Restart all services\nsystemctl restart &lt;service-name&gt;\n</code></pre>"},{"location":"supabase/","title":"Self-Hosted Supabase with Secure Remote Access","text":""},{"location":"supabase/#one-minute-summary","title":"One-Minute Summary","text":"<p>I implemented a self-hosted Supabase instance with enterprise-grade security features: \u2022 Containerized Supabase deployment on Arch Linux using Docker and Docker Compose for easy management and scalability \u2022 PostgreSQL backend with full Supabase feature set including real-time subscriptions, authentication, and APIs \u2022 Zero-trust network access via Twingate for secure remote connectivity without exposing services to the public internet \u2022 Production-ready configuration with proper service management, logging, and health monitoring</p>"},{"location":"supabase/#project-timeline","title":"Project Timeline","text":"Environment Setup <p>Arch Linux VM configuration, Docker installation, and system preparation</p> Supabase Deployment <p>Supabase CLI installation, project initialization, and container deployment</p> Twingate Integration <p>Zero-trust network setup, connector deployment, and access policy configuration</p> Testing &amp; Optimization <p>End-to-end testing, performance optimization, and documentation</p>"},{"location":"supabase/#copy-paste-reproduction","title":"Copy-Paste Reproduction","text":"<p>Here's the minimal command sequence to reproduce this setup:</p> <pre><code># 1. Install Docker and Docker Compose on Arch Linux\nsudo pacman -S docker docker-compose\nsudo systemctl enable --now docker\n\n# 2. Install Supabase CLI\ncurl -sL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz -o supabase.tar.gz\ntar -xzf supabase.tar.gz\nsudo mv supabase /usr/local/bin/\n\n# 3. Initialize and start Supabase\nsupabase init\nsupabase start\n\n# 4. Set up Twingate (requires Twingate account)\n# Download and install Twingate connector from admin panel\n# Configure network access policies in Twingate dashboard\n\n# 5. Verify deployment\ndocker ps\nsupabase status\n</code></pre>"},{"location":"supabase/#performance-metrics","title":"Performance Metrics","text":"Component Configuration Performance PostgreSQL 1GB shared_buffers ~1000 QPS sustained API Gateway 512MB memory limit &lt;50ms average response Auth Service 256MB memory limit &lt;100ms token validation Dashboard Static file serving &lt;200ms page load Twingate Connector 128MB memory usage &lt;10ms latency overhead"},{"location":"supabase/#resource-usage","title":"Resource Usage","text":"<ul> <li>Total Memory: ~2.5GB for full stack</li> <li>Storage: ~1GB for containers, ~500MB for data</li> <li>Network: ~1Mbps for remote access via Twingate</li> <li>CPU: ~10% average utilization under normal load</li> </ul>"},{"location":"supabase/access-control/","title":"Access Control and Security","text":""},{"location":"supabase/access-control/#verification-commands","title":"Verification Commands","text":"<p>Use these commands to verify your Supabase deployment is working correctly:</p>"},{"location":"supabase/access-control/#service-health-check","title":"Service Health Check","text":"<pre><code># Check all Supabase services\nsupabase status\n\n# Verify Docker containers\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n</code></pre>"},{"location":"supabase/access-control/#api-connectivity-tests","title":"API Connectivity Tests","text":"<pre><code># Test REST API\ncurl -X GET 'http://localhost:54321/rest/v1/' \\\n  -H 'apikey: &lt;your-anon-key&gt;' \\\n  -H 'Content-Type: application/json'\n\n# Test Auth API\ncurl -X GET 'http://localhost:54321/auth/v1/settings' \\\n  -H 'apikey: &lt;your-anon-key&gt;'\n</code></pre>"},{"location":"supabase/access-control/#database-connectivity","title":"Database Connectivity","text":"<pre><code># Connect to PostgreSQL\npsql postgresql://postgres:postgres@localhost:54322/postgres -c '\\dt'\n\n# Check database size\npsql postgresql://postgres:postgres@localhost:54322/postgres -c \"SELECT pg_size_pretty(pg_database_size('postgres'));\"\n</code></pre>"},{"location":"supabase/access-control/#network-and-security-verification","title":"Network and Security Verification","text":"<pre><code># Check listening ports\nss -tulpn | grep -E ':54321|:54322|:54323'\n\n# Verify Twingate connector status\ndocker logs twingate-connector --tail 20\n\n# Test internal connectivity\nnmap -p 54321-54323 localhost\n</code></pre>"},{"location":"supabase/backup/","title":"Backup Configuration","text":""},{"location":"supabase/backup/#backup-configuration_1","title":"Backup Configuration","text":""},{"location":"supabase/backup/#create-backup-script","title":"Create Backup Script","text":"<p>Create Backup Script:</p> <pre><code>cat &gt; ~/scripts/backup-supabase.sh &lt;&lt; 'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/home/$(whoami)/backups/supabase\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Backup PostgreSQL database\ndocker exec supabase_db_postgres pg_dump -U postgres postgres &gt; \"$BACKUP_DIR/postgres_$DATE.sql\"\n\n# Backup Supabase configuration\ncp -r ~/projects/supabase-local/supabase \"$BACKUP_DIR/config_$DATE\"\n\n# Compress backups older than 1 day\nfind \"$BACKUP_DIR\" -name \"*.sql\" -mtime +1 -exec gzip {} \\;\n\n# Remove backups older than 30 days\nfind \"$BACKUP_DIR\" -name \"*.gz\" -mtime +30 -delete\n\necho \"Backup completed: $DATE\"\nEOF\n</code></pre> <p>Make Script Executable:</p> <pre><code>chmod +x ~/scripts/backup-supabase.sh\n</code></pre> <p>What this does: Creates an automated backup solution Why this matters: Protects against data loss and configuration issues</p> <p>Schedule Regular Backups:</p> <pre><code>crontab -e\n</code></pre> <p>Add:</p> <pre><code>0 2 * * * /home/&lt;username&gt;/scripts/backup-supabase.sh &gt;&gt; /var/log/supabase-backup.log 2&gt;&amp;1\n</code></pre> <p>What this does: Schedules daily backups at 2 AM Why this matters: Ensures regular, automated data protection</p>"},{"location":"supabase/backup/#log-rotation-configuration","title":"Log Rotation Configuration","text":"<p>Set Up Log Rotation:</p> <pre><code>sudo tee /etc/logrotate.d/docker &lt;&lt; EOF\n/var/lib/docker/containers/*/*.log {\n    rotate 7\n    daily\n    compress\n    size=1M\n    missingok\n    delaycompress\n    copytruncate\n}\nEOF\n</code></pre> <p>What this does: Configures automatic log rotation for Docker containers Why this matters: Prevents log files from consuming excessive disk space</p>"},{"location":"supabase/docker-setup/","title":"Docker Setup Guide","text":""},{"location":"supabase/docker-setup/#system-preparation","title":"System Preparation","text":""},{"location":"supabase/docker-setup/#docker-installation-and-configuration","title":"Docker Installation and Configuration","text":"<p>Install Docker and Docker Compose:</p> <pre><code>sudo pacman -S docker\n</code></pre> <p>What this does: Installs Docker container runtime on Arch Linux Why this matters: Docker provides isolated environments for running Supabase services</p> <pre><code>sudo pacman -S docker-compose\n</code></pre> <p>What this does: Installs Docker Compose for multi-container orchestration Why this matters: Supabase requires multiple interconnected services (PostgreSQL, Auth, API, etc.)</p> <p>Enable Docker Service:</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>What this does: Enables Docker to start automatically at boot Why this matters: Ensures containers restart after system reboots</p> <pre><code>sudo systemctl start docker\n</code></pre> <p>What this does: Starts Docker service immediately Why this matters: Makes Docker available for immediate use</p> <p>Add User to Docker Group (Optional):</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>What this does: Allows running Docker commands without sudo Why this matters: Improves workflow convenience Gotcha: Requires logout/login to take effect</p>"},{"location":"supabase/docker-setup/#system-resource-configuration","title":"System Resource Configuration","text":"<p>Check Available Resources:</p> <pre><code>free -h\n</code></pre> <p>What this does: Shows available memory Why this matters: Supabase requires at least 2GB RAM for optimal performance</p> <pre><code>df -h\n</code></pre> <p>What this does: Shows available disk space Why this matters: Docker images and PostgreSQL data require significant storage</p> <p>Verify Docker Installation:</p> <pre><code>docker --version\ndocker-compose --version\n</code></pre> <p>What this does: Confirms Docker installation Why this matters: Ensures we have compatible versions</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>What this does: Tests Docker functionality with a simple container Why this matters: Validates Docker is working correctly</p>"},{"location":"supabase/docker-setup/#service-management","title":"Service Management","text":""},{"location":"supabase/docker-setup/#create-systemd-service-for-supabase","title":"Create Systemd Service for Supabase","text":"<p>Create Systemd Service for Supabase:</p> <pre><code>sudo tee /etc/systemd/system/supabase.service &lt;&lt; EOF\n[Unit]\nDescription=Supabase Local Development\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nType=forking\nUser=&lt;your-username&gt;\nWorkingDirectory=&lt;path-to-supabase-project&gt;\nExecStart=/usr/local/bin/supabase start\nExecStop=/usr/local/bin/supabase stop\nRestart=on-failure\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n</code></pre> <p>What this does: Creates a systemd service for automatic Supabase startup Why this matters: Ensures Supabase starts automatically after system boot Gotcha: Replace placeholders with actual username and path</p> <p>Enable Supabase Service:</p> <pre><code>sudo systemctl enable supabase.service\nsudo systemctl start supabase.service\n</code></pre> <p>What this does: Enables and starts the Supabase service Why this matters: Makes Supabase management part of system service management</p>"},{"location":"supabase/installation/","title":"Supabase Installation Guide","text":""},{"location":"supabase/installation/#supabase-cli-installation","title":"Supabase CLI Installation","text":""},{"location":"supabase/installation/#download-and-install-supabase-cli","title":"Download and Install Supabase CLI","text":"<p>Download Supabase CLI:</p> <pre><code>curl -sL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz -o supabase.tar.gz\n</code></pre> <p>What this does: Downloads the latest Supabase CLI for Linux Why this matters: The CLI manages Supabase projects and local development environments Gotcha: Ensure you have internet connectivity for the download</p> <p>Extract Archive:</p> <pre><code>tar -xzf supabase.tar.gz\n</code></pre> <p>What this does: Extracts the Supabase binary from the compressed archive Why this matters: Makes the executable available for installation</p> <p>Install to System Path:</p> <pre><code>sudo mv supabase /usr/local/bin/\n</code></pre> <p>What this does: Moves the binary to a system PATH location Why this matters: Makes the <code>supabase</code> command available from anywhere</p> <p>Verify Installation:</p> <pre><code>supabase --version\n</code></pre> <p>What this does: Confirms Supabase CLI is installed and shows version Why this matters: Ensures successful installation</p> <p>Clean Up:</p> <pre><code>rm -f supabase.tar.gz\n</code></pre> <p>What this does: Removes the downloaded archive file Why this matters: Frees up disk space</p>"},{"location":"supabase/installation/#supabase-project-setup","title":"Supabase Project Setup","text":""},{"location":"supabase/installation/#initialize-supabase-project","title":"Initialize Supabase Project","text":"<p>Create Project Directory:</p> <pre><code>mkdir -p ~/projects/supabase-local\ncd ~/projects/supabase-local\n</code></pre> <p>What this does: Creates a dedicated directory for the Supabase project Why this matters: Keeps project files organized and isolated</p> <p>Initialize Supabase:</p> <pre><code>supabase init\n</code></pre> <p>What this does: Creates a new Supabase project with default configuration Why this matters: Sets up the project structure and configuration files Output: Creates <code>supabase/</code> directory with config and migrations</p>"},{"location":"supabase/installation/#start-supabase-services","title":"Start Supabase Services","text":"<p>Start All Services:</p> <pre><code>supabase start\n</code></pre> <p>What this does: Downloads and starts all Supabase Docker containers Why this matters: Launches PostgreSQL, Auth, API, Dashboard, and other services Time: First run takes 5-10 minutes to download images Gotcha: Requires significant bandwidth for initial setup</p> <p>Monitor Container Status:</p> <pre><code>docker ps\n</code></pre> <p>What this does: Shows running Docker containers Why this matters: Verifies all Supabase services are running properly</p> <p>Check Service Status:</p> <pre><code>supabase status\n</code></pre> <p>What this does: Displays Supabase service URLs and configuration Why this matters: Provides access information for the Supabase dashboard and APIs</p>"},{"location":"supabase/installation/#configuration-verification","title":"Configuration Verification","text":"<p>Access Supabase Dashboard:</p> <ul> <li>Local URL: <code>http://localhost:54323</code> (default)</li> <li>Default credentials are displayed in <code>supabase status</code> output</li> </ul> <p>Test API Connectivity:</p> <pre><code>curl -X GET 'http://localhost:54321/rest/v1/' \\\n  -H 'apikey: &lt;your-anon-key&gt;'\n</code></pre> <p>What this does: Tests the REST API endpoint Why this matters: Confirms the API gateway is functioning Gotcha: Replace <code>&lt;your-anon-key&gt;</code> with actual key from <code>supabase status</code></p> <p>Check Database Connection:</p> <pre><code>psql postgresql://postgres:postgres@localhost:54322/postgres\n</code></pre> <p>What this does: Connects directly to PostgreSQL database Why this matters: Verifies database accessibility Gotcha: Default password is 'postgres' unless configured otherwise</p>"},{"location":"supabase/monitoring/","title":"Monitoring and Troubleshooting","text":""},{"location":"supabase/monitoring/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"supabase/monitoring/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Check container resource usage\ndocker stats\n</code></pre> <p>What this does: Shows real-time container resource usage Why this matters: Helps monitor performance and resource consumption</p> <p>Monitor Service Logs:</p> <pre><code>supabase logs\n</code></pre> <p>What this does: Shows aggregated logs from all Supabase services Why this matters: Helps troubleshoot issues and monitor health</p>"},{"location":"supabase/monitoring/#performance-monitoring-commands","title":"Performance Monitoring Commands","text":"<pre><code># Monitor resource usage\ndocker stats --no-stream\n\n# Check disk usage\ndu -sh ~/projects/supabase-local/\n\n# Monitor database performance\npsql postgresql://postgres:postgres@localhost:54322/postgres -c \"SELECT * FROM pg_stat_activity;\"\n</code></pre>"},{"location":"supabase/monitoring/#troubleshooting-guide","title":"Troubleshooting Guide","text":"Supabase services fail to start <p>Symptoms: Error messages during <code>supabase start</code> Common Causes: Port conflicts, insufficient resources, Docker issues</p> <pre><code># Check port availability\nss -tulpn | grep -E ':54321|:54322|:54323'\n\n# Free up ports if needed\nsudo fuser -k 54321/tcp 54322/tcp 54323/tcp\n\n# Restart Docker service\nsudo systemctl restart docker\n\n# Check Docker daemon logs\njournalctl -u docker.service --since \"1 hour ago\"\n</code></pre> Cannot access Supabase dashboard <p>Symptoms: Browser cannot reach http://localhost:54323 Solution: Check service status and firewall settings</p> <pre><code># Verify dashboard service is running\ndocker ps | grep supabase_studio\n\n# Check if port is bound correctly\nss -tulpn | grep :54323\n\n# Try accessing from different port\nsupabase status  # Check actual dashboard URL\n\n# Restart Supabase services\nsupabase stop\nsupabase start\n</code></pre> Database connection refused <p>Symptoms: Cannot connect to PostgreSQL database Solution: Verify database service and credentials</p> <pre><code># Check PostgreSQL container status\ndocker ps | grep postgres\n\n# View PostgreSQL logs\ndocker logs supabase_db_postgres\n\n# Test connection with correct credentials\nsupabase status  # Get current DB credentials\npsql \"$(supabase status | grep 'DB URL' | cut -d' ' -f3)\"\n</code></pre> Twingate connector not connecting <p>Symptoms: Connector shows offline in Twingate admin Solution: Check tokens and network connectivity</p> <pre><code># Verify connector logs\ndocker logs twingate-connector\n\n# Check network connectivity\ncurl -I https://yourdomain.twingate.com\n\n# Recreate connector with new tokens\ndocker-compose down\n# Update tokens in docker-compose.yml\ndocker-compose up -d\n</code></pre> High memory usage <p>Symptoms: System running out of memory Solution: Optimize container resources</p> <pre><code># Check memory usage by container\ndocker stats --no-stream\n\n# Reduce PostgreSQL memory if needed\n# Edit ~/projects/supabase-local/supabase/config.toml\n# Adjust shared_buffers and work_mem settings\n\n# Restart with new configuration\nsupabase stop\nsupabase start\n</code></pre> Slow API response times <p>Symptoms: API calls taking too long Solution: Check database performance and optimize queries</p> <pre><code># Monitor database connections\npsql postgresql://postgres:postgres@localhost:54322/postgres \\\n  -c \"SELECT count(*) FROM pg_stat_activity;\"\n\n# Check for slow queries\npsql postgresql://postgres:postgres@localhost:54322/postgres \\\n  -c \"SELECT query, state, query_start FROM pg_stat_activity WHERE state = 'active';\"\n\n# Optimize database if needed\npsql postgresql://postgres:postgres@localhost:54322/postgres \\\n  -c \"VACUUM ANALYZE;\"\n</code></pre>"},{"location":"supabase/twingate/","title":"Twingate Integration for Secure Access","text":""},{"location":"supabase/twingate/#twingate-integration-for-secure-access_1","title":"Twingate Integration for Secure Access","text":""},{"location":"supabase/twingate/#twingate-account-setup","title":"Twingate Account Setup","text":"<p>Prerequisites:</p> <ul> <li>Create a Twingate account at twingate.com</li> <li>Set up your network in the Twingate Admin Console</li> <li>Generate a connector token for your deployment</li> </ul>"},{"location":"supabase/twingate/#twingate-connector-deployment","title":"Twingate Connector Deployment","text":"<p>Create Connector Directory:</p> <pre><code>mkdir -p ~/twingate\ncd ~/twingate\n</code></pre> <p>What this does: Creates a dedicated directory for Twingate configuration Why this matters: Keeps Twingate files separate from other services</p> <p>Create Docker Compose for Twingate:</p> <pre><code>cat &gt; docker-compose.yml &lt;&lt; EOF\nversion: '3.7'\nservices:\n  twingate-connector:\n    image: twingate/connector:1\n    container_name: twingate-connector\n    environment:\n      - TWINGATE_ACCESS_TOKEN=&lt;your-access-token&gt;\n      - TWINGATE_REFRESH_TOKEN=&lt;your-refresh-token&gt;\n      - TWINGATE_URL=&lt;your-network&gt;.twingate.com\n    restart: unless-stopped\n    sysctls:\n      - net.ipv4.ping_group_range=0 2147483647\n    networks:\n      - twingate\nnetworks:\n  twingate:\n    driver: bridge\nEOF\n</code></pre> <p>What this does: Creates a Docker Compose configuration for Twingate connector Why this matters: Provides persistent and manageable Twingate connectivity Gotcha: Replace placeholder values with actual tokens from Twingate admin console</p> <p>Deploy Twingate Connector:</p> <pre><code>docker-compose up -d\n</code></pre> <p>What this does: Starts the Twingate connector in the background Why this matters: Establishes secure tunnel to Twingate network</p> <p>Verify Connector Status:</p> <pre><code>docker-compose logs -f twingate-connector\n</code></pre> <p>What this does: Shows connector logs to verify connection Why this matters: Confirms successful registration with Twingate network</p> <p>Easy Way: You can just copy paste the docker command with the binaries!</p>"},{"location":"supabase/twingate/#network-access-configuration","title":"Network Access Configuration","text":"<p>Configure Resource Access in Twingate Admin:</p> <ol> <li> <p>Add Resources:</p> <ul> <li>Supabase Dashboard: <code>http://localhost:54323</code></li> <li>Supabase API: <code>http://localhost:54321</code></li> <li>PostgreSQL: <code>localhost:54322</code></li> </ul> </li> <li> <p>Create Access Policies:</p> <ul> <li>Define user groups with appropriate permissions</li> <li>Set up conditional access based on device/location</li> <li>Configure session timeouts and security policies</li> </ul> </li> <li> <p>Deploy Client Applications:</p> <ul> <li>Install Twingate client on devices requiring access</li> <li>Authenticate users and verify connectivity</li> </ul> </li> </ol>"}]}